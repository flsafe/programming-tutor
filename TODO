
#-------- Next TODO --------#

The review exercise page should let you get more info on an exercise.
	-View the grade sheet, view the exercise, retake the exercise, etc.

Make sure the navigation menu doesn't show up while doing an exercise or viewing the exercise grades
	-The tutorials for each exercise should have the navigation menu. The 'exercises' menu should
	 be selected.
	
Going back to the grade page, causes a hang. This is because
	retrieving the grade results with "#grade_status" destroys the grade results
	from the db. Maybe we can simply display the grade sheet if one exists?

Learn to deploy app
	-Implement amazon S# store for images
	-Use google CDN for javascript libraries

Write 2 real exercises, Write a unit test frame work so that there is no duplication between unit tests
	
Add a limit to the amount of times the client will poll for results

Implement the following convention for all unit tests
	- results = {:error=>[a standard list of errors], 
							 ? :error_message=>"A description of the error", ?
							
							 :grade=>'the grade', 
							
							 :tests=>{{:unit_test_name=>{:expected=>'expected', :got=>'got', :points=>'points'}},
												{:unit_test_name=>{:expected=>'expected, :got=>'got', :points=>'points'}}}
												
							 :run_times=>{:linear_size=>[size1, size2, ...],
														:linear_time=>[time1, time2, ...]}
					    }
					
					
#-------- Refactor ----------#

I shouldn't have to run unit_test_results through YAML, the method should do it itself.

All the code in GradeSolutionJob, is shit! There are
	messages all over the place, they are never even displayed to the user.

Add a scenario that checks for errors during grading. The view should display a message
	like: "Oh no! an error occured!"
	
Clean up tutor_controller#grade_status. Yuck! Do this after the new test above is added

Refactor syntax_status: Don't use the rjs template! It is too complicated, see that way I did
	grading. Have 'call_remote_periodically' check the condition 'checking...'		
	
Get rid of the string literals in UnitTestSpec

Don't run raw commands using `` instead move into some object
 so that I can change the way this stuff runs on heroku

The rescue's should log the exceptions

Make compiler use pipes instead of files to use the compiler (Maybe faster? less code)


#-------- Debatable ---------#		
				
? Should GradeSolutionResult and SyntaxCheckResult be consolidated somehow?

? Remove, 'status' from the tutor controller and replace with 'message' ?

? Keep the tutor syntax check and grading DRY ?

? Add a basic 'conectivity' scenario for grading, and then one to test every exercise

? Most likely makes sense to make tutorials their own objects. 
 -Also do the figures really need to be part of the exercise? The figures should be their own objects
 - intended to be displayed in problem text, or tutorials, or hints, or user profile pics, not just exercises.


#------- Finished -------------#

#Rewrite the user specs to use factory stubs
#if the solution does not compile, then should that not be part of the unit test object, not the job object
#The grade sheet specs are all fucked, rewrite using factory specs
#add error message to the return result (*done but instead I added a different method that returns the error)
#Write grade solution specs 
#Get rid of the SyntaxChecker, use the Compile class instead
#In unit_test and Compiler, consolidate the file manipulation stuff, to an external class
#	that is responsible for generating unique file names.
#The template class should not be responsibile for compiling it self or checking it self forsyntax errors. 
#	Instead have the unit-test class be responsible for compiling the solution template and checking for syntax errors
#The unit_test#run_on method doesn't need the entire template. Instead it just needs the filled in template code
#Add the exercise prototypes and handle the unit tests and syntax checks
#Unit tests and executables should communicate through stdin and pipes
#Fix the unit test grade sheet it is not returning the correct results
#Make sure the recommendation engine does not return completed exercies
#Finish the first exercise. Create the timing test, have it return a real grade, ...
#Add grade sheet display and page flow (view tutorial, view class grade_sheets, go home)