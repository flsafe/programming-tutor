
#-------- Next TODO --------#

? Exercises aren't being removed from the overview after they are done. ?

Setup a production db

Navigation menu is shown when 'create user' fails

Write an exercise to show off

Organize the gems into groups

UnitTest needs to make sure to execute the user solutions in a sandbox
 - Should throw some exception if the sandbox is not present
 - Dont' forget to add tests to make sure a sandbox is being used.

Some of the user executable stdout stuff is eventually displayed to the in the
	html. Make sure that the user output is always escaped in the view and in the
	appropriate model. 

Don't be lazy with your model associations. You don't have a delete policy in the
 models when deleting things like gradesheets, exercises, exercise sets, etc...

The website is slow
	-Don't include prototype and text_edit_area in every page!


The grade sheets should show the solution source code.

Keep track of average solve time for each exercise. Record how long it took the user to
 complete the exercise.

The review exercise page should let you get more info on an exercise.
	-View the grade sheet, view the exercise, retake the exercise, etc.
	
Implement amazon S# store for images. (Show images doesn't work yet)

Use google CDN for javascript libraries

Make sure the navigation menu doesn't show up while doing an exercise or viewing the exercise grades
	-The tutorials for each exercise should have the navigation menu. The 'exercises' menu should
	 be selected.
	
Going back to the grade page, causes a hang. This is because
	retrieving the grade results with "#grade_status" destroys the grade results
	from the db. Maybe we can simply display the grade sheet if one exists?

Write a unit test frame work so that there is no duplication between unit tests
	
Add a limit to the amount of times the client will poll for results

Implement the following convention for all unit tests
	- results = {:error=>[a standard list of errors], 
							 ? :error_message=>"A description of the error", ?
							
							 :grade=>'the grade', 
							
							 :tests=>{{:unit_test_name=>{:expected=>'expected', :got=>'got', :points=>'points'}},
												{:unit_test_name=>{:expected=>'expected, :got=>'got', :points=>'points'}}}
												
							 :run_times=>{:linear_size=>[size1, size2, ...],
														:linear_time=>[time1, time2, ...]}
					    }
					
#-------- Refactor ----------#

? Should GradeSolutionResult and SyntaxCheckResult be consolidated somehow?
 - Place SyntaxCheckResult#get_result into SyntaxCheckJob.get_result
 - Place GradeSolutionResult#get_result into GradeSolutionJob.get_result
 - Make XXXResult into a SINGLE dumb object.
   JobResult {job_type:string, job_error_msg:string, job_info:string }

? Keep the tutor syntax check and grading DRY ?

All the code in GradeSolutionJob, is shit! There are
	messages all over the place, they are never even displayed to the user.
	-The rescue's should log the exceptions
	
Same as above but for UnitTest
	
Clean up tutor_controller#grade_status. Yuck! Do this after the new test above is added
	
Get rid of the string literals in UnitTestSpec

Don't run raw commands using `` instead move into some object
 so that I can change the way this stuff runs on heroku

Make compiler use pipes instead of files to use the compiler (Maybe faster? less code)
	-You should also do the same thing for running unit tests! Open a pipe to the
	-ruby interpreter and feed it the unit test src code using stdin
	
Test gcc vs some smaller faster compiler

#-------- Debatable ---------#		

? Remove, 'status' from the tutor controller and replace with 'message' ?

? Add a basic 'conectivity' scenario for grading, and then one to test every exercise

? Most likely makes sense to make tutorials their own objects. 
 -Also do the figures really need to be part of the exercise? The figures should be their own objects
 - intended to be displayed in problem text, or tutorials, or hints, or user profile pics, not just exercises.

#------- Finished -------------#

#Rewrite the user specs to use factory stubs
#if the solution does not compile, then should that not be part of the unit test object, not the job object
#The grade sheet specs are all fucked, rewrite using factory specs
#add error message to the return result (*done but instead I added a different method that returns the error)
#Write grade solution specs 
#Get rid of the SyntaxChecker, use the Compile class instead
#In unit_test and Compiler, consolidate the file manipulation stuff, to an external class
#	that is responsible for generating unique file names.
#The template class should not be responsibile for compiling it self or checking it self forsyntax errors. 
#	Instead have the unit-test class be responsible for compiling the solution template and checking for syntax errors
#The unit_test#run_on method doesn't need the entire template. Instead it just needs the filled in template code
#Add the exercise prototypes and handle the unit tests and syntax checks
#Unit tests and executables should communicate through stdin and pipes
#Fix the unit test grade sheet it is not returning the correct results
#Make sure the recommendation engine does not return completed exercies
#Finish the first exercise. Create the timing test, have it return a real grade, ...
#Add grade sheet display and page flow (view tutorial, view class grade_sheets, go home)
#Add a scenario that checks for errors during grading. The view should display a message
#	like: "Oh no! an error occured!"
#Refactor syntax_status: Don't use the rjs template! It is too complicated, see that way I did
#	grading. Have 'call_remote_periodically' check the condition 'checking...'		


#----- Using the site----#

Exercise Set tags should be an aggregation of all the exercise tags

Make sure you make the difference between a solution template and unit test. It to easy
to put the .rb file in the solution template or the .c file in the unit test.

The admin/show exercise page sucks. It is hard to read and the admin doesn't want to see
the description they instead would like to see the set, and the set and exercise statistcs.

The Overview page has an empty 'avg grade'. If there is no average grade, don't show that.

The show/exercise page displays the discription twice! WTF?

There is no text formatting in tutor/show. I can't read shit! Make sure that I can use either straight HTML
or markup.

Setup a mysql db for production


#Use ree instead of 1.8.6
# -followed the instructions in ree installer

#The work deamon needs to be turned on by a capistrano task

#Delayed job failure "Could not generate tmp file for syntax check"
# - Make sure that the tmp dir is writeable, maybe use /tmp instead? I think so
# - Make sure the code creates the tmp/work dir if it does not exist
# - Have capistrano create the work dir, and set the correct priviliages

#Grade job solution returns an error, there is no logging describing why, need to add more logging

# Grading an exercise that does not compile returns an error. It should
# instead describe that the solution did not compile. 

# Can't access the tutorials.

#Get rid of the flashes, they don't work right