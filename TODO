#----- Using the site----#

No demo exercises visible

View grade sheets doesn't work

View class grade sheets doesn't work

Check syntax doesn't work

Exercise Set tags should be an aggregation of all the exercise tags

Make sure you make the difference between a solution template and unit test. It to easy
to put the .rb file in the solution template or the .c file in the unit test.

The admin/show exercise page sucks. It is hard to read and the admin doesn't want to see
the description they instead would like to see the set, and the set and exercise statistcs.

The Overview page has an empty 'avg grade'. If there is no average grade, don't show that.

#-------- Next TODO --------#

SELINUX into enforceing mode
	- Do this right before going public to get as much into the audit log as possible

UnitTest needs to make sure to execute the user solutions in a sandbox
 - Should throw some exception if the sandbox is not present
 - Dont' forget to add tests to make sure a sandbox is being used.
 - Write a sandbox unit test that should be tested on the 'test production' system

Write an exercise to show off
	
Implement amazon S# store for images. (Show images doesn't work yet)

Use google CDN for javascript libraries

Going back to the grade page, causes a hang. This is because
	retrieving the grade results with "#grade_status" destroys the grade results
	from the db. Maybe we can simply display the grade sheet if one exists?

Write a unit test frame work so that there is no duplication between unit tests
	
Add a limit to the amount of times the client will poll for results

Implement the following convention for all unit tests
	- results = {:error=>[a standard list of errors], 
							 ? :error_message=>"A description of the error", ?
							
							 :grade=>'the grade', 
							
							 :tests=>{{:unit_test_name=>{:expected=>'expected', :got=>'got', :points=>'points'}},
												{:unit_test_name=>{:expected=>'expected, :got=>'got', :points=>'points'}}}
												
							 :run_times=>{:linear_size=>[size1, size2, ...],
														:linear_time=>[time1, time2, ...]}
					    }
					
  - These validation rules shoud go into the results object


#-------- Refactor ----------#

Don't run raw commands using `` instead move into some object
 so that I can change the way this stuff runs on heroku

Make compiler use pipes instead of files to use the compiler (Maybe faster? less code)
	-You should also do the same thing for running unit tests! Open a pipe to the
	-ruby interpreter and feed it the unit test src code using stdin
	
Test gcc vs some smaller faster compiler

#-------- Debatable ---------#		

? Add a basic 'conectivity' scenario for grading, and then one to test every exercise

? Most likely makes sense to make tutorials their own objects. 
 -Also do the figures really need to be part of the exercise? The figures should be their own objects
 - intended to be displayed in problem text, or tutorials, or hints, or user profile pics, not just exercises.
