
<p>
Write a function that takes two arguments. The first argument is a 
a character array 'remove_chars'. The second argument is a 
character array 'str'. The function removes the characters in 'remove_chars'
from 'str'.
</p>

<p> For example: </p>

<pre><code>
void remove_char(char remove_chars[], char str[]);

Given remove_char('c', 'acacac') the resultant string is 'aaa'

Given remove_char('c', 'aaaac')  the resultant string is 'aaaa'
	
Given remove_char('c', 'abab') the resultant string is 'abab'
</code></pre>

<p>
Notice that the function 'remove_char' returns
'void' and modifies the character array 'str' in place.
</p>


<h4>Hint 1:</h4>
<p> Most people on their first try come up with an algorithm like this:</p>

<pre>
<code>
for each letter L in str
 if L equals C
  shift everything to the right of L to the left by one
</code>
</pre>

<p>
This is very inefficient and is O(n^2) in the worst case. You can do better!
</p>

<p>
In fact how could you do this in linear time?
</p>
	    
